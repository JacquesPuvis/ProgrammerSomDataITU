
Exercise 8.1

compileToFile (fromFile "ex3.c") "ex3.out";;  
val it: Machine.instr list =
  [LDARGS;                                          //load command line with argument n
  CALL (1, "L1");                                   //call main
  STOP;                                             //end program
  Label "L1";                                       //void main(int n)
    INCSP 1;                                        //int i
    GETBP; CSTI 1; ADD;                             //adress for i 
    CSTI 0; STI; INCSP -1;                          //i = 0
    GOTO "L3";                                      //go to condition of while loop
  Label "L2";                                       //loop body
    GETBP; CSTI 1; ADD; LDI; PRINTI; INCSP -1;      //get i and print i 
    GETBP; CSTI 1; ADD; GETBP; CSTI 1; ADD;         //get i, get i, add 1
        LDI; CSTI 1; ADD; STI; INCSP -1; 
    INCSP 0;                                        //no operation
  Label "L3";                                       //condition i < n
    GETBP; CSTI 1; ADD; LDI;                        //get i
    GETBP; CSTI 0; ADD; LDI;                        //get n
    LT;                                             //<
    IFNZRO "L2";                                    //if true go to L2
    INCSP -1;                                       //if not true pop condition from stack (end loop)
    RET 0]                                          //function end

  compile "ex5";;
val it: Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; 
  Label "L1"; INCSP 1; GETBP; CSTI 1; ADD; GETBP; CSTI 0; ADD; LDI; STI; INCSP -1; INCSP 1; GETBP; CSTI 0; ADD; LDI; GETBP; CSTI 2; ADD; CALL (2, "L2"); INCSP -1; GETBP; CSTI 2; ADD; LDI; PRINTI; INCSP -1; INCSP -1; GETBP; CSTI 1; ADD; LDI; PRINTI; INCSP -1; INCSP -1; RET 0; 
  Label "L2"; GETBP; CSTI 1; ADD; LDI; GETBP; CSTI 0; ADD; LDI; GETBP; CSTI 0; ADD; LDI; MUL; STI; INCSP -1; INCSP 0; RET 1]
